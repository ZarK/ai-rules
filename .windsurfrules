# .windsurfrules

## Bootstrap

- The global bootstrap command preserves any extra keyword (e.g., "tutorial") and then defers the operation to this file.
- On invocation of `bootstrap`, the following actions are performed:
  - Verify the existence of the `.windsurfrules` file.
  - If missing or outdated, fetch and update the file from [https://github.com/ZarK/ai-rules](https://github.com/ZarK/ai-rules).
  - Create an identical `.cursorrules` file for compatibility with Cursor.

### Context-Specific Bootstrapping

- If the `bootstrap` command is provided with a keyword (e.g., `bootstrap tutorial`), the system additionally:
  - Searches the repository for a context folder containing a file like `tutorial.md` for proper instructions.
  - Initializes and imports specific workflows into `knowledge/workflows` under the `.aidocs` directory.

### Post-Analysis
- Analyze the current solution and generate `solution_description.md` in the `.aidocs` folder.
- Post-analysis, check [https://github.com/PatrickJS/awesome-cursorrules](https://github.com/PatrickJS/awesome-cursorrules) and [https://github.com/balqaasem/awesome-windsurfrules/tree/main/rules/windsurfrules](https://github.com/balqaasem/awesome-windsurfrules/tree/main/rules/windsurfrules) for further project-specific rules.

### Self-Update and Verification
- This bootstrap process also features a self-update mechanism:
  - It checks the current version of the bootstrap configuration.
  - If an update is detected, it automatically fetches the latest version from the official source.
  - A status log is recorded to indicate the update process.


### Documentation Instructions
- Always check for the existence of a `.aidocs` folder in the repository.
- If `.aidocs` does not exist, create it with the following structure:

```
.aidocs/
├── README.md               # Explains structure and conventions
├── project_plan.md         # High-level roadmap and major milestones
├── solution_description.md # System overview and key features
├── active_goals/           # Currently active goals (limit: 3)
│   ├── README.md           # Lists active goals and their priorities
│   └── [goal_name].md      # Individual active goal details
├── archive/                # Historical documentation
│   └── YYYY-MM/            # Organized by month
│       ├── goals/          # Completed goals
│       └── progress/       # Progress logs
└── knowledge/              # Permanent knowledge base
    ├── architecture/       # System design decisions
    ├── patterns/           # Common patterns and solutions
    └── workflows/          # Development workflows and guides
```

- Add the documents as empty without content to initialize them
- Maintain maximum 3 active goals at any time
- When completing a goal:
  - Move goal document to `archive/YYYY-MM/goals/`
  - Move related progress logs to `archive/YYYY-MM/progress/`
  - Extract reusable patterns to `knowledge/`
  - Update project_plan.md to reflect completion

## General Instructions

## Preferred tech stack
- bun, uv, uvw, vite
- nextjs, typescript, sanity
- tailwindcss v4, framermotion, heroicons
- python, asyncio, sqlite

## Git Workflow
- Always check `git status` before pushing changes.
- Group changes into logical commits.
- Write descriptive commit messages for each commit.
- Keep documentation in sync with code changes.

## Virtual Environments
- Use environment management to isolate project dependencies:
  - Node: `nvm` (Node Version Manager) or `volta` for Node.js versions and packages
  - Python: `venv`, `conda` (full environment manager with its own package manager), or `pyenv`
  - System packages: 
    - `docker` (container isolation)
    - `asdf` (universal version manager, alternative to brew)
    - Personal homebrew (`~/homebrew`) for user-specific installations
- Always add environment-specific directories to `.gitignore`

## Communication Guidelines
- Be casual unless otherwise specified
- Be terse
- Suggest solutions that I didn't think about—anticipate my needs
- Treat me as an expert
- Be accurate and thorough
- Give the answer immediately. Provide detailed explanations and restate my query in your own words if necessary after giving the answer
- Value good arguments over authorities, the source is irrelevant
- Consider new technologies and contrarian ideas, not just the conventional wisdom
- You may use high levels of speculation or prediction, just flag it for me
- No moral lectures
- Discuss safety only when it's crucial and non-obvious
- If your content policy is an issue, provide the closest acceptable response and explain the content policy issue afterward
- Cite sources whenever possible at the end, not inline
- No need to mention your knowledge cutoff
- No need to disclose you're an AI
- Please respect my prettier preferences when you provide code.
- Split into multiple responses if one response isn't enough to answer the question.

If I ask for adjustments to code I have provided you, do not repeat all of my code unnecessarily. Instead try to keep the answer brief by giving just a couple lines before/after any changes you make. Multiple code blocks are ok.

## Best Practices
- Always explicitly state the files of interest to change or query, clearly stating state code relationships runs to other components.
- Frequently run tests. Claude Code excels at validating new functionality through test-driven development.
- Periodically review the entire project, assessing logic consistency and identifying any redundant or inefficient code.